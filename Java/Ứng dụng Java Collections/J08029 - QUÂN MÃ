package baitap;

import java.util.*;

class Pair<K, V>{
    K k;
    V v;

    public Pair(K k, V v) {
        this.k = k;
        this.v = v;
    }
}
public class test1 {
    static int dx[] = new int[]{2,2,1,1,-1,-1,-2,-2};
    static int dy[] = new int[]{1,-1,2,-2,2,-2,1,-1};
    static int ktra(int x, int y){
        if(x > 0 && x < 9 && y > 0 && y < 9) return 1;
        return 0;
    }
    static int BFS(Pair x, Pair y){
        ArrayDeque<Pair<Pair<Integer, Integer>, Integer>> a = new ArrayDeque<>();
        TreeMap<String, Integer> m = new TreeMap<>();
        a.add(new Pair<>(new Pair(x.k, x.v), 0));
        while(!a.isEmpty()){
            Pair p = a.getFirst();
            a.removeFirst();
            Pair p1 = (Pair) p.k;
            int count = (int) p.v;
            if(p1.k == y.k && p1.v == y.v)
                return count;
            for(int i = 0; i < 8; i++){
                int z = (int) p1.k + dx[i];
                int t = (int) p1.v + dy[i];
                String tmp = String.valueOf(z) + String.valueOf(t);
                if(!m.containsKey(tmp) && ktra(z, t) == 1){
                    m.put(tmp, 1);
                    a.add(new Pair<>(new Pair(z, t), count + 1));
                }
            }
        }
        return 0;
    }
    
    public static void main(String[] args) throws Exception{
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        while(t-- > 0){
            String s = sc.next(), s1 = sc.next();
            System.out.println(BFS(new Pair(s.charAt(0) - 'a' + 1, s.charAt(1)-'0'), new Pair(s1.charAt(0) - 'a' + 1, s1.charAt(1)-'0')));
        }
    }
}
